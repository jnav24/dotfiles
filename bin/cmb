#!/bin/bash

# cmb (Clean Merged Branches)
# a command to fetch, prune and remove any branches that were merged remotely
# this command will run git in your current directory

SAFE_BRANCHES="staging|dev|develop|master|main|test|production"

read -p "$(printf "\e[31mThis can delete all local branches that were merged remotely except for $SAFE_BRANCHES. Do you want to continue? (Y/n) \e[0m")" -n 1 -r

if [[ ! $REPLY =~ ^[Nn]$ ]]
then
        if [[ -d ".git" ]]; then
                # checks to ensure you are in one of the safe branches.
                if [[ -z $(git symbolic-ref --short -q HEAD | egrep -v "(^\*\|\$SAFE_BRANCHES)") ]]; then
                        printf "\e[32mUnable to run this command in a feature branch. Checkout to a main branch\e[0m\n"
                else
		        printf "\e[33mdeleting...\e[0m\n"
                        # this fetches latest and prunes remote tracking, gets a list of merged branches
                        # that are merged in the current branch then locally deletes all branches in that list
                        # Warning: before running this command, make sure you are in your main branch;
                        # aka not a feature branch
                        git fetch -p; git branch --merged | egrep -v "(^\*|$SAFE_BRANCHES)" | xargs git branch -D
                        # this fetches the latest and prunes remote tracking, gets all branches that does not exist
                        # locally, then locally deletes all branches in that list
                        git branch --list --no-merged | egrep -v "(^\*|$SAFE_BRANCHES)" | xargs git branch -D
                        printf "\e[32mdone\e[0m\n"
                fi
        else
                printf "\e[31mUnable to locate git in the current directory\e[0m\n"
        fi
fi
